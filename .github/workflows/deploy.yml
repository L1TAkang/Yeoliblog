# deploy.yml

# 워크플로우의 전체 이름을 지정합니다.
name: Deploy to GitHub Pages

# 어떤 이벤트가 발생했을 때 이 워크플로우를 실행할지 정의합니다.
on:
  # 'push' 이벤트가 발생했을 때 실행합니다.
  push:
    # 'main' 브랜치에 push될 때만 실행하도록 제한합니다.
    branches:
      - main

# 실행될 작업(job)들의 목록입니다.
jobs:
  # 'build-and-deploy' 라는 이름의 작업을 정의합니다.
  build-and-deploy:
    # 이 작업이 실행될 가상 환경을 지정합니다. (최신 우분투)
    runs-on: ubuntu-latest

    # 작업 안에서 순서대로 실행될 단계(step)들의 목록입니다.
    steps:
      # 첫 번째 할 일: 코드 가져오기
      - name: Checkout
        uses: actions/checkout@v3

      # 두 번째 할 일: 비밀 키 값으로 파일 내용 교체하기 (디버깅 포함)
      - name: Replace Placeholders
        # 이 단계에서만 사용할 환경 변수를 설정합니다.
        env:
          FIREBASE_SECRET: ${{ secrets.FIREBASE_CONFIG }}
          UNSPLASH_SECRET: ${{ secrets.UNSPLASH_ACCESS_KEY }}
        # 아래 명령어들을 순서대로 실행합니다.
        run: |
          # --- 디버깅 단계 ---
          echo "Step 1: Checking if index.html exists."
          ls -l index.html
          echo "Step 2: Checking if secrets are loaded (first 10 chars)."
          echo "FIREBASE_SECRET: ${FIREBASE_SECRET:0:10}"
          echo "UNSPLASH_SECRET: ${UNSPLASH_SECRET:0:10}"
          
          # --- 교체 단계 ---
          echo "Step 3: Replacing placeholders in index.html."
          sed -i "s|__FIREBASE_CONFIG__|${FIREBASE_SECRET}|g" index.html
          sed -i "s|__UNSPLASH_ACCESS_KEY__|${UNSPLASH_SECRET}|g" index.html
          
          # --- 검증 단계 ---
          echo "Step 4: Verifying replacement."
          # 아래 grep 명령어 실행 시 아무것도 출력되지 않아야 성공입니다.
          grep "__FIREBASE_CONFIG__" index.html || echo "Firebase config replaced successfully."
          grep "__UNSPLASH_ACCESS_KEY__" index.html || echo "Unsplash key replaced successfully."

      # 세 번째 할 일: 수정된 파일을 GitHub Pages로 배포하기
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          # 저장소에 쓰기 권한을 부여하기 위한 토큰입니다.
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # 배포할 파일들이 들어있는 디렉토리입니다. (현재 위치)
          publish_dir: ./
